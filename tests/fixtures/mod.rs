use std::cmp::{max, min};

pub mod complex;

#[allow(dead_code, non_snake_case)]
// matrix_symmetric_packed_8x8
pub fn MSP8X8() -> Vec<f64> {
    vec![
        2.024761390077735,
        -1.0457176517867426,
        -0.8962112639605789,
        -0.060634778120552485,
        -0.5013783177950893,
        0.9260627253330198,
        -1.4577072101223822,
        0.09505622698864298,
        0.8476649635960255,
        -1.6243645297605886,
        1.5761581812187344,
        -1.475547635260523,
        -0.14460820731054116,
        -1.0750101908181724,
        0.40654273194492646,
        -0.14727079003896576,
        1.5415930688269568,
        -0.9818556688038707,
        0.4965781726616992,
        1.6969478807230851,
        -0.26073630856812263,
        0.5013218277237272,
        -1.0135396704947914,
        1.6147522354681292,
        0.005641984852495504,
        -2.9048990603455724,
        -1.1071648189687495,
        1.5475669326182715,
        -0.10150344763172572,
        0.042650249796697896,
        -1.5967180142971973,
        0.490967372597059,
        0.421603365384753,
        1.8739038985953016,
        1.0345143239443348,
        0.08181031035401386,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_lower
pub fn M6X6L() -> Vec<f64> {
    vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        0.0,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        0.0,
        0.0,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.0,
        0.0,
        0.0,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        0.0,
        0.0,
        0.0,
        0.0,
        -1.2845993538721883,
        0.04672617218835198,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.1519117540872,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_packed_upper
pub fn M6X6PU() -> Vec<f64> {
    vec![
        1.053750863028617,
        0.197684262345795,
        -1.068692711254786,
        0.2626454586627623,
        -1.2329011995712644,
        -0.00372353379218051,
        -0.9740025611125269,
        0.6893726977654734,
        -0.955839103276798,
        -1.2317070584140966,
        -0.9106806824932887,
        0.7412763052602079,
        0.06851153327714439,
        -0.3237507545879617,
        -1.0865030469936974,
        -0.767790184730859,
        -1.1197200611269833,
        -0.4481742366033955,
        0.47173637445323024,
        -1.180490682884277,
        1.4702569970829857,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_upper_band
pub fn M6X6UB() -> Vec<f64> {
    vec![
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.053750863028617,
        0.0,
        0.0,
        0.0,
        0.0,
        0.197684262345795,
        -1.068692711254786,
        0.0,
        0.0,
        0.0,
        0.2626454586627623,
        -1.2329011995712644,
        -0.00372353379218051,
        0.0,
        0.0,
        -0.9740025611125269,
        0.6893726977654734,
        -0.955839103276798,
        -1.2317070584140966,
        0.0,
        -0.9106806824932887,
        0.7412763052602079,
        0.06851153327714439,
        -0.3237507545879617,
        -1.0865030469936974,
        -0.767790184730859,
        -1.1197200611269833,
        -0.4481742366033955,
        0.47173637445323024,
        -1.180490682884277,
        1.4702569970829857,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_packed_lower
pub fn M6X6PL() -> Vec<f64> {
    vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        -1.2845993538721883,
        0.04672617218835198,
        1.1519117540872,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_upper
pub fn M6X6U() -> Vec<f64> {
    vec![
        1.053750863028617,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.197684262345795,
        -1.068692711254786,
        0.0,
        0.0,
        0.0,
        0.0,
        0.2626454586627623,
        -1.2329011995712644,
        -0.00372353379218051,
        0.0,
        0.0,
        0.0,
        -0.9740025611125269,
        0.6893726977654734,
        -0.955839103276798,
        -1.2317070584140966,
        0.0,
        0.0,
        -0.9106806824932887,
        0.7412763052602079,
        0.06851153327714439,
        -0.3237507545879617,
        -1.0865030469936974,
        0.0,
        -0.767790184730859,
        -1.1197200611269833,
        -0.4481742366033955,
        0.47173637445323024,
        -1.180490682884277,
        1.4702569970829857,
    ]
}

#[allow(dead_code, non_snake_case)]
// matrix_6x6_lower_band
pub fn M6X6LB() -> Vec<f64> {
    vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        0.0,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.0,
        0.0,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        0.0,
        0.0,
        0.0,
        -1.2845993538721883,
        0.04672617218835198,
        0.0,
        0.0,
        0.0,
        0.0,
        1.1519117540872,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]
}

const RE36: [f64; 72] = [
    1.2629542848807933,
    -0.3262333607056494,
    1.3297992629225006,
    1.2724293214294047,
    0.4146414344564082,
    -1.5399500419037095,
    -0.9285670347135381,
    -0.2947204467905602,
    -0.005767172747536955,
    2.404653388857951,
    0.7635934611404596,
    -0.7990092489893682,
    -1.1476570092363514,
    -0.28946157368822334,
    -0.29921511789731614,
    -0.411510832795067,
    0.2522234481561323,
    -0.8919211272845686,
    0.43568329935571865,
    -1.237538421929958,
    -0.22426788527830935,
    0.37739564598170106,
    0.1333363608148414,
    0.8041895097449078,
    -0.057106774383808755,
    0.5036079722337261,
    1.085769362145687,
    -0.6909538396968303,
    -1.2845993538721883,
    0.04672617218835198,
    -0.23570655643950122,
    -0.5428882550102544,
    -0.4333103174567822,
    -0.6494716467962331,
    0.726750747385451,
    1.1519117540872,
    0.9921603654457979,
    -0.42951310949188126,
    1.2383041008533804,
    -0.2793462818542693,
    1.7579030898107073,
    0.5607460908880562,
    -0.4527839725531578,
    -0.8320432961178319,
    -1.166570547084707,
    -1.0655905803882961,
    -1.563782051071005,
    1.1565369971501793,
    0.8320471285723897,
    -0.22732869142475534,
    0.2661373616721048,
    -0.3767027185836281,
    2.4413646288945894,
    -0.7953391172553718,
    -0.054877473711578625,
    0.2501413228541527,
    0.6182432935662469,
    -0.17262350264585732,
    -2.2239002740099374,
    -1.263614384970583,
    0.3587288959713519,
    -0.011045478465663564,
    -0.9406491626186084,
    -0.11582532215695436,
    -0.8149687088699175,
    0.24226348085968588,
    -1.4250983947324998,
    0.36594112304921983,
    0.2484126488725964,
    0.06528818167162072,
    0.01915639166027384,
    0.2573383771555333,
];

const RNORM10: [f64; 10] = [
    -0.6490100777088978,
    -0.11916876241803812,
    0.6641356998941105,
    1.100969102194087,
    0.14377148075806995,
    -0.11775359816595128,
    -0.9120683669483379,
    -1.4375862408299789,
    -0.7970895250719646,
    1.2540831064499711,
];

#[allow(dead_code)]
pub fn vector(n: usize) -> Vec<f64> {
    let mut mat = vec![0f64; n];
    let mut i = 0;
    while i < n {
        mat[i] = RNORM10[i];
        i += 1;
    }
    mat
}

#[allow(dead_code)]
pub fn bandmatrix_nxm_ku_kl(n: isize, m: isize, kl: isize, ku: isize) -> Vec<f64> {
    let size = (n * m) as usize;
    let mut mat = vec![0f64; size];

    let mut cursor = 0;
    let mut j = 1;
    while j <= n {
        let mut i = max(j - ku, 1);
        while i <= min(j - 1, m) {
            let index = ((j - 1) * m + i - 1) as usize;
            mat[index] = RE36[cursor];
            cursor += 1;
            i += 1
        }
        let mut i = j;
        while i <= min(j + kl, m) {
            let index = ((j - 1) * m + i - 1) as usize;
            mat[index] = RE36[cursor];
            cursor += 1;
            i += 1
        }
        j += 1
    }
    mat
}

#[allow(dead_code)]
pub fn matrix_mxn(m: isize, n: isize) -> Vec<f64> {
    let size = (n * m) as usize;
    let mut mat = vec![0f64; size];

    let mut cursor = 0;
    let mut j = 1;
    while j <= n {
        let mut i = 1;
        while i <= m {
            let index = ((j - 1) * m + i - 1) as usize;
            mat[index] = RE36[cursor];
            cursor += 1;
            i += 1
        }
        j += 1
    }
    mat
}

#[allow(dead_code)]
pub fn diagonal_nxn(n: isize) -> Vec<f64> {
    let size = (n * n) as usize;
    let mut mat = vec![0f64; size];

    let mut j = 0;
    while j < n {
        let mut i = 0;
        while i < n {
            let index = (j * n + i) as usize;
            if i == j {
                mat[index] = 1f64;
                continue;
            }
            mat[index] = 0f64;
            i += 1
        }
        j += 1
    }
    mat
}
