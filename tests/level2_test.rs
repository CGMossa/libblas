use libblas::level2;
use libblas::unstable::matrix;
mod fixtures;
mod utils;

#[test]
fn gbmv() {
    let a = vec![
        -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0,
        2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0,
    ];
    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];

    level2::gbmv(
        'n',
        6,
        9,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        2.5,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![4.0, 1.0, 4.0, 1.0, 4.0, 1.0]);

    let a = vec![];
    let x = vec![];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        6,
        0,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        2.5,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        6,
        9,
        1,
        1,
        0.0,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);

    let a = vec![
        -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0,
        2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0, -1.0, 2.0, -1.0,
    ];
    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        3,
        9,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        2.5,
        y.as_mut_ptr(),
        2,
    );
    assert_eq!(y, vec![4.0, 1.0, 1.0, 1.0, 4.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        3,
        9,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        0.0,
        y.as_mut_ptr(),
        2,
    );
    assert_eq!(y, vec![1.5, 1.0, -1.5, 1.0, 1.5, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        6,
        9,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        0.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![1.5, -1.5, 1.5, -1.5, 1.5, -1.5]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        't',
        6,
        9,
        1,
        1,
        1.5,
        a.as_ptr(),
        3,
        vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0].as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![2.5, -0.5, 2.5, -0.5, 2.5, 5.5, -3.5, 1.0, 1.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gbmv(
        'n',
        6,
        9,
        1,
        1,
        0.0,
        a.as_ptr(),
        3,
        x.as_ptr(),
        1,
        2.5,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![2.5, 2.5, 2.5, 2.5, 2.5, 2.5]);

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 3.0];
    let mut y = vec![9.0, 0.0, 0.0, 0.0, 0.0, -9.0];
    level2::gbmv(
        'n',
        6,
        9,
        1,
        1,
        1.0,
        a.as_ptr(),
        3,
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        -1,
    );
    assert_eq!(y, vec![-1.0, 1.0, -1.0, 1.0, 1.0, 2.0]);

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'x',
            6,
            9,
            1,
            1,
            1.5,
            vec![].as_ptr(),
            3,
            vec![].as_ptr(),
            1,
            2.5,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            vec![].as_ptr(),
            2,
            vec![].as_ptr(),
            1,
            2.5,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            vec![].as_ptr(),
            3,
            vec![].as_ptr(),
            1,
            2.5,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gbmv(
            'n',
            6,
            1,
            1,
            1,
            1.5,
            vec![].as_ptr(),
            3,
            vec![].as_ptr(),
            0,
            2.5,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());
}

#[test]
fn gemv() {
    let a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 5.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv(
        'n',
        6,
        9,
        1.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        2.5,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            -7.7995958197861910,
            -0.90987740363925695,
            -1.3999755270779133,
            14.987896066159010,
            6.2202929537743330,
            11.557443037629128
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv(
        'n',
        6,
        9,
        1.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            -4.4250261895358562,
            -12.524016615003347,
            7.8897808715701103,
            1.5491376277059317,
            -4.6228371150791645,
            -12.558390671387315
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0];
    level2::gemv(
        'n',
        6,
        9,
        1.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            -12.558390671387315,
            -4.6228371150791645,
            1.5491376277059317,
            7.8897808715701103,
            -12.524016615003347,
            -4.4250261895358562
        ]
    );

    let x = vec![1.0, 1.0, 2.0, 2.0, 3.0, 3.0];
    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv(
        't',
        6,
        9,
        1.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            -2.0157254394143820,
            -1.4639058979228139,
            -2.4103632131591439,
            2.8775364421308041,
            -7.3735247328877449,
            2.2206097096204758,
            4.3736887406557798,
            12.966479852795601,
            1.2937025949358940
        ]
    );

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv(
        't',
        6,
        9,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv(
        't',
        6,
        9,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        1.5,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 6.0, 6.0, 7.5]);

    let mut y = vec![1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.0, 4.0, 5.0];
    level2::gemv(
        't',
        3,
        4,
        1.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -2,
        0.0,
        y.as_mut_ptr(),
        -2,
    );
    approximately!(
        y,
        vec![
            -1.5212320089340210,
            1.0000000000000000,
            -3.2950003892183304,
            1.0000000000000000,
            0.11344654485583305,
            1.0000000000000000,
            0.95389350876212120,
            4.0000000000000000,
            5.0000000000000000
        ]
    );

    let result = std::panic::catch_unwind(|| {
        level2::gemv(
            'x',
            3,
            4,
            1.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            -2,
            0.0,
            vec![].as_mut_ptr(),
            -2,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv(
            't',
            7,
            1,
            0.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv(
            't',
            1,
            7,
            0.0,
            vec![].as_ptr(),
            7,
            vec![].as_ptr(),
            0,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::gemv(
            't',
            1,
            7,
            0.0,
            vec![].as_ptr(),
            7,
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn ger() {
    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let x = vec![
        0.10330280, 0.62787610, 0.09179221, 0.10161032, 0.33920221, 0.93821373,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.874444904,
        0.613885907,
        0.617612043,
    ];
    level2::ger(3, 4, 1.5, x.as_ptr(), 2, y.as_ptr(), 2, a.as_mut_ptr(), 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            7.2718515354917246E-002,
            0.36351983515259478,
            1.0372139062035037,
            0.43656249423752236,
            5.8115462974502208E-002,
            -0.68507688152110546,
            -1.3906126226474256,
            0.39658429928803307,
            0.36164925525028524,
            -0.51351115308794015,
            1.2320879450036237E-003,
            1.1090561402548120
        ],
        1E-7
    );

    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.0,
        0.613885907,
        0.617612043,
    ];

    level2::ger(3, 4, 1.5, x.as_ptr(), -2, y.as_ptr(), -2, a.as_mut_ptr(), 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            -5.4877471178770065E-002,
            0.25014132261276245,
            0.61824327707290649,
            0.47196548709709463,
            1.9597711867927137E-002,
            -0.90616335526003555,
            -1.1695261489084956,
            0.43510205039460814,
            0.32624626239071297,
            -0.23003943308711516,
            -5.7902458525016520E-003,
            0.79173168103747149
        ],
        1E-7
    );

    let mut a = vec![
        -0.05487747,
        0.25014132,
        0.61824329,
        -0.17262350,
        -2.22390027,
        -1.2636144,
        0.35872890,
        -0.01104548,
        -0.94064916,
        -0.11582532,
        -0.81496871,
        0.2422635,
        -1.42509839,
        0.36594112,
        0.24841265,
        0.06528818,
        0.01915639,
        0.2573384,
        -0.64901008,
        -0.11916876,
        0.66413570,
        1.10096910,
        0.14377148,
        -0.1177536,
        -0.91206837,
        -1.43758624,
        -0.79708953,
        1.25408311,
        0.77214219,
        -0.2195156,
        -0.42481028,
        -0.41898010,
        0.99698686,
        -0.27577803,
        1.25601882,
        0.6466744,
        1.29931230,
        -0.87326211,
        0.00837096,
        -0.88087172,
        0.59625902,
        0.1197176,
        -0.28217388,
        1.45598840,
        0.22901959,
        0.99654393,
        0.78185918,
        -0.7767766,
        -0.61598991,
        0.04658030,
        -1.13038578,
        0.57671878,
        -1.28074943,
        1.6254473,
    ];
    let y = vec![
        0.823443247,
        0.615896282,
        0.502300758,
        0.008093905,
        0.222554779,
        0.787857479,
        0.0, // this ZERO!!! will cause the first "column" to be unchanged in "expect"
        0.613885907,
        0.617612043,
    ];
    level2::ger(3, 4, 0.0, x.as_ptr(), -2, y.as_ptr(), -2, a.as_mut_ptr(), 6);
    approximately!(
        matrix::slice(a.clone(), 6, 1, 3, 1, 4),
        vec![
            -5.4877471178770065E-002,
            0.25014132261276245,
            0.61824327707290649,
            0.35872888565063477,
            -1.1045480147004128E-002,
            -0.94064915180206299,
            -1.4250984191894531,
            0.36594110727310181,
            0.24841265380382538,
            -0.64901006221771240,
            -0.11916875839233398,
            0.66413569450378418
        ],
        1E-7
    );

    let result = std::panic::catch_unwind(|| {
        level2::ger(
            3,
            2,
            1.0,
            vec![].as_ptr(),
            2,
            vec![].as_ptr(),
            2,
            vec![].as_mut_ptr(),
            2,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::ger(
            3,
            2,
            1.0,
            vec![].as_ptr(),
            0,
            vec![].as_ptr(),
            2,
            vec![].as_mut_ptr(),
            5,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::ger(
            3,
            2,
            1.0,
            vec![].as_ptr(),
            2,
            vec![].as_ptr(),
            0,
            vec![].as_mut_ptr(),
            5,
        )
    });
    assert!(result.is_err());
}

#[test]
fn sbmv() {
    let a = vec![
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        1.2629542848807933,
        0.0,
        0.0,
        0.0,
        0.0,
        -0.9285670347135381,
        -0.2947204467905602,
        0.0,
        0.0,
        0.0,
        -1.1476570092363514,
        -0.28946157368822334,
        -0.29921511789731614,
        0.0,
        0.0,
        0.43568329935571865,
        -1.237538421929958,
        -0.22426788527830935,
        0.37739564598170106,
        0.0,
        -0.057106774383808755,
        0.5036079722337261,
        1.085769362145687,
        -0.6909538396968303,
        -1.2845993538721883,
        -0.23570655643950122,
        -0.5428882550102544,
        -0.4333103174567822,
        -0.6494716467962331,
        0.726750747385451,
        1.1519117540872,
    ];

    let x = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv(
        'u',
        6,
        5,
        0.75,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        0.25,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            2.7137399400666355,
            0.37601484101785054,
            0.83541208737435735,
            2.8753927545108686,
            -2.5523139419510348,
            0.11808677629424658
        ]
    );

    let a = vec![
        0.42224244493991137,
        -0.7566161579452455,
        -0.5090229720808566,
        -0.7133912411518395,
        -0.5207411698065698,
        -0.8821312454529107,
        0.7525384253822267,
        0.5578293548896909,
        0.5946176517754793,
        -0.08945109276100993,
        -0.17983183590695262,
        0.0,
        0.3094478561542928,
        -0.29360545612871647,
        -0.459479708224535,
        0.9853681223466992,
        0.0,
        0.0,
        -0.0437639313749969,
        0.8481489396654069,
        0.19752193428575993,
        0.0,
        0.0,
        0.0,
        -0.703576878644526,
        -0.9738448490388691,
        0.0,
        0.0,
        0.0,
        0.0,
        -0.008812844287604094,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ];

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv(
        'l',
        6,
        5,
        0.75,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        0.25,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            2.0812734977655536,
            -1.9542666589882982,
            -2.2440378506435685,
            -0.68963129420530089,
            1.5703642633315664,
            -0.68742543306498216
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv(
        'l',
        6,
        5,
        0.75,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.25,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            2.2840235318308029,
            0.18431556950534489,
            -1.2952810672982329,
            1.4444836256888887,
            0.28382396673364896,
            0.99512154689519638
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv(
        'l',
        3,
        5,
        0.75,
        a.as_ptr(),
        6,
        x.as_ptr(),
        2,
        0.25,
        y.as_mut_ptr(),
        -2,
    );
    approximately!(
        y,
        vec![
            -0.50847831684910694,
            -2.2239003181457520,
            -0.93575624247033118,
            0.35872888565063477,
            0.66384203668497299,
            -0.94064915180206299
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];

    level2::sbmv(
        'l',
        6,
        5,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(
        y,
        vec![
            -0.17262350264585732,
            -2.2239002740099374,
            -1.263614384970583,
            0.3587288959713519,
            -0.011045478465663564,
            -0.9406491626186084
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    level2::sbmv(
        'l',
        6,
        5,
        0.25,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            0.53551962404625031,
            -2.6899975112963719,
            -1.9063258316600895,
            9.8957713777981571E-002,
            0.51332973268319304,
            -1.0914035335068850
        ]
    );

    let mut y = vec![
        -0.17262350264585732,
        -2.2239002740099374,
        -1.263614384970583,
        0.3587288959713519,
        -0.011045478465663564,
        -0.9406491626186084,
    ];
    level2::sbmv(
        'l',
        6,
        5,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        0.0,
        y.as_mut_ptr(),
        1,
    );
    assert_eq!(y, vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);

    let result = std::panic::catch_unwind(|| {
        level2::sbmv(
            'x',
            6,
            5,
            0.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv(
            'l',
            1,
            7,
            0.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv(
            'l',
            1,
            3,
            0.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            0,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::sbmv(
            'l',
            1,
            3,
            0.0,
            vec![].as_ptr(),
            6,
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn spmv() {
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv(
        'u',
        8,
        1.0,
        fixtures::MSP8X8().as_ptr(),
        x.as_ptr(),
        1,
        0.25,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            -0.96717789113031305,
            2.1647171752586969,
            -6.2618818235773670,
            -0.28748768382407186,
            3.5511096434863134,
            6.2163906955162798,
            -3.8875544026997284,
            2.0548975501649309
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv(
        'u',
        8,
        1.0,
        fixtures::MSP8X8().as_ptr(),
        x.as_ptr(),
        -1,
        0.25,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            -1.7251108158053823,
            4.9291648942353898,
            -3.2171098666478279,
            0.11384660016321080,
            -3.3658783555330647,
            3.1501275434227995,
            -2.8188776853639128,
            4.6340510576024654
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv(
        'u',
        8,
        0.0,
        fixtures::MSP8X8().as_ptr(),
        x.as_ptr(),
        -1,
        1.0,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            0.70211672782897949,
            2.5071110725402832,
            -1.8900271654129028,
            -0.58981281518936157,
            -1.7145023345947266,
            -0.42099788784980774,
            0.31014138460159302,
            1.7025705575942993
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv(
        'u',
        8,
        0.0,
        fixtures::MSP8X8().as_ptr(),
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        -1,
    );
    assert_eq!(y, vec![0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]);

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];
    level2::spmv(
        'l',
        8,
        1.0,
        fixtures::MSP8X8().as_ptr(),
        x.as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            2.8154710108834342,
            5.9284605596693600,
            -4.8866919583862236,
            -4.6680190884183741,
            -1.1643587827344710,
            -1.1286206109692598,
            -2.1048056242799813,
            1.0595167238593439
        ]
    );

    let result = std::panic::catch_unwind(|| {
        level2::spmv(
            'x',
            8,
            0.0,
            vec![].as_ptr(),
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv(
            'l',
            8,
            0.0,
            vec![].as_ptr(),
            vec![].as_ptr(),
            0,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv(
            'l',
            8,
            0.0,
            vec![].as_ptr(),
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv(
            'x',
            8,
            0.0,
            vec![].as_ptr(),
            vec![].as_ptr(),
            0,
            0.0,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spmv(
            'x',
            8,
            0.0,
            vec![].as_ptr(),
            vec![].as_ptr(),
            1,
            0.0,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn spr() {
    let rand0_vector1x8 = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let mut ap = fixtures::MSP8X8();
    level2::spr('u', 8, 1.0, rand0_vector1x8.as_ptr(), 1, ap.as_mut_ptr());
    approximately!(
        ap,
        vec![
            2.0315716098591032,
            -1.0957330579673474,
            -0.52888625290938407,
            1.2598470696961073E-002,
            -1.0392200605795914,
            1.7135771687065393,
            -1.4664069362184962,
            0.15894933070911099,
            0.75411189290463332,
            -1.6132508265122678,
            1.5470376352816384,
            -1.2616798170168568,
            -0.45775613390574854,
            -1.0378096626698443,
            0.53106312243660714,
            -0.19269131367313719,
            1.8751718610429435,
            -1.4702858157659620,
            0.55460141617446190,
            1.8911677011441483,
            4.2196515545185775E-002,
            0.59493111402262855,
            -1.7010275548546048,
            2.6213804316288218,
            -0.11394076092473959,
            -3.3051755865091579,
            -1.7314930842551917,
            2.8342736808954783,
            -0.22218220057011706,
            0.92894268838806227,
            -2.8944382671379145,
            0.64513049241996789,
            0.93762990952289016,
            2.6787724346172013,
            -0.62427638245270600,
            2.2202823972507417
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr('l', 8, 1.0, rand0_vector1x8.as_ptr(), -1, ap.as_mut_ptr());
    approximately!(
        ap,
        vec![
            4.1632335251375139,
            -2.7045082874362265,
            -9.1342702483018456E-002,
            0.45539178074157149,
            -0.34721516850494361,
            -0.37165749111404978,
            -0.57141472713904307,
            -2.5622525532256191E-002,
            2.1343717424570627,
            -2.2486927197608679,
            1.1758816997533543,
            -1.5951304169961045,
            0.86201992449819898,
            -1.7624980634300442,
            0.50015198022593665,
            0.15566204820567009,
            1.7358128436993852,
            -0.92383246105522865,
            8.1480614637285953E-003,
            2.0305267184877067,
            -0.30615684633362150,
            0.62584225623329903,
            -0.97633915409440486,
            1.3016043732248743,
            0.21950983905450805,
            -2.9340196509808738,
            -1.0960511910065915,
            1.4540138313430488,
            -3.7610344328749878E-002,
            3.3950479308609172E-002,
            -0.80920360731732544,
            -4.6874399654679877E-002,
            0.49483659947827974,
            2.2412288841908357,
            0.98449884701617307,
            8.8620481972331078E-002
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![1.0, 0.0, 2.0, 0.0, 3.0, 0.0, 4.0, 0.0];
    level2::spr('l', 8, 1.0, x.as_ptr(), -1, ap.as_mut_ptr());
    approximately!(
        ap,
        vec![
            2.0247614383697510,
            -1.0457175970077515,
            -0.89621126651763916,
            -6.0634776949882507E-002,
            -0.50137829780578613,
            0.92606270313262939,
            -1.4577071666717529,
            9.5056228339672089E-002,
            16.847664952278137,
            -1.6243644952774048,
            13.576158165931702,
            -1.4755476713180542,
            7.8553917855024338,
            -1.0750101804733276,
            4.4065427184104919,
            -0.14727078378200531,
            1.5415930747985840,
            -0.98185569047927856,
            0.49657818675041199,
            1.6969479322433472,
            -0.26073631644248962,
            9.5013218522071838,
            -1.0135396718978882,
            7.6147522926330566,
            5.6419847533106804E-003,
            9.5100879669189453E-002,
            -1.1071648597717285,
            1.5475668907165527,
            -0.10150344669818878,
            4.2650248855352402E-002,
            2.4032819271087646,
            0.49096736311912537,
            2.4216033518314362,
            1.8739038705825806,
            1.0345143079757690,
            1.0818103104829788
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr('u', 8, 1.0, x.as_ptr(), -1, ap.as_mut_ptr());
    approximately!(
        ap,
        vec![
            2.0247614383697510,
            -1.0457175970077515,
            15.103788733482361,
            -6.0634776949882507E-002,
            -0.50137829780578613,
            0.92606270313262939,
            -1.4577071666717529,
            12.095056228339672,
            0.84766495227813721,
            7.3756355047225952,
            1.5761581659317017,
            -1.4755476713180542,
            -0.14460821449756622,
            -1.0750101804733276,
            0.40654271841049194,
            -0.14727078378200531,
            9.5415930747985840,
            -0.98185569047927856,
            6.4965781867504120,
            1.6969479322433472,
            3.7392636835575104,
            0.50132185220718384,
            -1.0135396718978882,
            1.6147522926330566,
            5.6419847533106804E-003,
            -2.9048991203308105,
            -1.1071648597717285,
            1.5475668907165527,
            -0.10150344669818878,
            4.0426502488553524,
            -1.5967180728912354,
            3.4909673631191254,
            0.42160335183143616,
            3.8739038705825806,
            1.0345143079757690,
            1.0818103104829788
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![];
    level2::spr('u', 8, 0.0, x.as_ptr(), -1, ap.as_mut_ptr());
    assert_eq!(ap, fixtures::MSP8X8());

    let result =
        std::panic::catch_unwind(|| level2::spr('x', 8, 1.0, x.as_ptr(), 1, vec![].as_mut_ptr()));
    assert!(result.is_err());

    let result =
        std::panic::catch_unwind(|| level2::spr('l', 8, 1.0, x.as_ptr(), 0, vec![].as_mut_ptr()));
    assert!(result.is_err());
}

#[test]
fn spr2() {
    let mut ap = fixtures::MSP8X8();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
        -1.1343309685168443,
        1.4623515387464268,
    ];
    let y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
        0.310141376504687,
        1.7025705860144955,
    ];

    level2::spr2('u', 8, 1.0, x.as_ptr(), 1, y.as_ptr(), 1, ap.as_mut_ptr());
    approximately!(
        ap,
        vec![
            1.9088788092259108,
            -0.82707953752360197,
            2.1427755934692527,
            -0.52773513210600953,
            -3.8717343654496190,
            4.2805589628926413,
            -1.3350154745463545,
            1.8894727757654550E-003,
            1.1718274256446302,
            -1.7487222649705982,
            1.9654044311580279,
            -1.6299664624518897,
            0.70993328171340764,
            -1.4638852889791973,
            -0.80346554733966968,
            0.27391191920031410,
            2.6663346814637361,
            -1.6485120651059919,
            0.12756695855303168,
            0.60473784680091658,
            -0.72416518619793635,
            -0.32070494348856116,
            -3.6694649960841836,
            3.4834429703160943,
            0.70738047292609663,
            -0.85064501113439839,
            -0.45891415626571330,
            0.84396092433016179,
            0.78473551646894890,
            4.7408108315515065,
            -5.8714976126722078,
            -0.19205897856395726,
            -1.4848080996234678,
            2.1953404531188951,
            -0.44322849686470533,
            5.0613237343172273
        ]
    );

    let mut ap = fixtures::MSP8X8();
    let x = vec![1.0, 2.0, 0.0, 4.0, 0.0, 6.0, 7.0, 8.0];
    let y = vec![9.0, 12.0, 13.0, 14.0, 0.0, 16.0, 17.0, 18.0];
    level2::spr2(
        'l',
        8,
        0.25,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        ap.as_mut_ptr(),
    );
    approximately!(
        ap,
        vec![
            74.024761438369751,
            64.454282402992249,
            58.103788733482361,
            -6.0634776949882507E-002,
            45.498621702194214,
            26.926062703132629,
            31.542292833328247,
            22.595056228339672,
            60.347664952278137,
            51.875635504722595,
            1.5761581659317017,
            40.024452328681946,
            22.605391785502434,
            28.424989819526672,
            20.406542718410492,
            47.852729216217995,
            1.5415930747985840,
            36.018144309520721,
            19.996578186750412,
            27.696947932243347,
            17.239263683557510,
            0.50132185220718384,
            -1.0135396718978882,
            1.6147522926330566,
            5.6419847533106804E-003,
            -2.9048991203308105,
            26.892835140228271,
            14.547566890716553,
            18.898496553301811,
            12.542650248855352,
            -1.5967180728912354,
            6.9909673631191254,
            3.6716033518314362,
            13.873903870582581,
            8.5345143079757690,
            4.5818103104829788
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr2(
        'u',
        8,
        0.25,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        ap.as_mut_ptr(),
    );
    approximately!(
        ap,
        vec![
            74.024761438369751,
            64.454282402992249,
            58.603788733482361,
            58.939365223050117,
            52.998621702194214,
            48.926062703132629,
            -1.4577071666717529,
            9.5056228339672089E-002,
            0.84766495227813721,
            -1.6243644952774048,
            47.576158165931702,
            40.024452328681946,
            36.855391785502434,
            -1.0750101804733276,
            28.406542718410492,
            25.852729216217995,
            24.291593074798584,
            18.518144309520721,
            0.49657818675041199,
            14.696947932243347,
            -0.26073631644248962,
            33.501321852207184,
            28.486460328102112,
            27.614752292633057,
            5.6419847533106804E-003,
            16.095100879669189,
            5.3928351402282715,
            13.547566890716553,
            22.398496553301811,
            20.042650248855352,
            15.903281927108765,
            0.49096736311912537,
            12.921603351831436,
            5.1239038705825806,
            8.5345143079757690,
            4.581810310482978
        ]
    );

    let mut ap = fixtures::MSP8X8();
    level2::spr2('u', 8, 0.0, x.as_ptr(), -1, y.as_ptr(), -1, ap.as_mut_ptr());
    assert_eq!(ap, fixtures::MSP8X8());

    let result = std::panic::catch_unwind(|| {
        level2::spr2(
            'x',
            8,
            1.0,
            vec![].as_ptr(),
            1,
            vec![].as_ptr(),
            1,
            vec![].as_mut_ptr(),
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spr2(
            'l',
            8,
            1.0,
            vec![].as_ptr(),
            0,
            vec![].as_ptr(),
            1,
            vec![].as_mut_ptr(),
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::spr2(
            'l',
            8,
            1.0,
            vec![].as_ptr(),
            1,
            vec![].as_ptr(),
            0,
            vec![].as_mut_ptr(),
        )
    });
    assert!(result.is_err());
}

#[test]
fn symv() {
    let a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv(
        'u',
        6,
        1.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        1,
        1.0,
        y.as_mut_ptr(),
        1,
    );
    approximately!(
        y,
        vec![
            -0.34473174217488856,
            2.6551581562507569,
            -2.9788880265441096,
            0.77215578203476642,
            -2.3181438495981777,
            -0.19616499922182973
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv(
        'u',
        6,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.35,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            0.24574085055520101,
            0.87748886044555263,
            -0.66150949662907621,
            -0.20643448180071822,
            -0.60007580688892403,
            -0.14734925823808975
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv(
        'u',
        6,
        0.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            -1.0601889945486187,
            -0.25310583298255546,
            0.23215355215989741,
            0.31792263624047945,
            -0.23418812548426216,
            0.52659731973169610
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv(
        'l',
        6,
        0.5,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        0.0,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            -6.0665572049565242E-002,
            -0.32925031366133339,
            0.54652082819193026,
            -1.9627004950369814E-004,
            -0.18855719168536922,
            0.28998873271818582
        ]
    );

    let mut y = vec![
        0.7021167106675735,
        2.5071111484833684,
        -1.890027143624024,
        -0.5898127901911715,
        -1.7145022968458246,
        -0.4209978978166964,
    ];
    level2::symv(
        'l',
        6,
        0.0,
        a.as_ptr(),
        6,
        x.as_ptr(),
        -1,
        1.0,
        y.as_mut_ptr(),
        -1,
    );
    approximately!(
        y,
        vec![
            0.70211672782897949,
            2.5071110725402832,
            -1.8900271654129028,
            -0.58981281518936157,
            -1.7145023345947266,
            -0.42099788784980774
        ]
    );
    let a = vec![];
    let result = std::panic::catch_unwind(|| {
        level2::symv(
            'x',
            6,
            0.5,
            a.as_ptr(),
            6,
            vec![].as_ptr(),
            -1,
            1.0,
            vec![].as_mut_ptr(),
            -1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv(
            'l',
            7,
            0.5,
            a.as_ptr(),
            6,
            vec![].as_ptr(),
            -1,
            1.0,
            vec![].as_mut_ptr(),
            -1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv(
            'l',
            7,
            0.5,
            a.as_ptr(),
            7,
            vec![].as_ptr(),
            0,
            1.0,
            vec![].as_mut_ptr(),
            -1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::symv(
            'l',
            7,
            0.5,
            a.as_ptr(),
            7,
            vec![].as_ptr(),
            4,
            1.0,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn syr() {
    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];

    level2::syr('u', 6, 1.0, x.as_ptr(), 1, a.as_mut_ptr(), 6);
    approximately!(
        a,
        vec![
            1.0605610441013518,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.14766879726298399,
            -0.70136767056532889,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.33587870086148897,
            -1.7707429783270889,
            0.78379093174982373,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -0.98270230965828498,
            0.75326582070363690,
            -1.0493921568733513,
            -1.2205934273347165,
            0.0000000000000000,
            0.0000000000000000,
            -0.93980124191944192,
            0.95514417809651597,
            -0.24463638865123194,
            -0.28655024632806270,
            -0.96198262484351371,
            0.0000000000000000,
            -0.81321072821724272,
            -0.78614131511214680,
            -0.93660436349163945,
            0.52975960094123131,
            -0.98627096329219199,
            1.7731898758261764
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('l', 6, 1.0, x.as_ptr(), -1, a.as_mut_ptr(), 6);
    approximately!(
        a,
        vec![
            1.3566837045996749,
            0.19421976890080117,
            5.8023229424049916E-002,
            -0.48843012528668339,
            0.33357878624435955,
            -4.5420529891131878E-002,
            0.19768425822257996,
            -0.94417228014746879,
            3.7200517803483324E-002,
            -0.31314791940818232,
            0.21386785430119737,
            -2.9120530650063259E-002,
            0.26264545321464539,
            -1.2329012155532837,
            7.3901349410508410E-003,
            -9.3553059373503888E-002,
            6.3893102369438903E-002,
            -8.6997695467432301E-003,
            -0.97400254011154175,
            0.68937271833419800,
            -0.95583909749984741,
            -0.44419263052594360,
            -0.53784176277380524,
            7.3233247646843580E-002,
            -0.91068071126937866,
            0.74127632379531860,
            6.8511530756950378E-002,
            -0.32375076413154602,
            -0.71917801526137382,
            -5.0015460959595970E-002,
            -0.76779019832611084,
            -1.1197201013565063,
            -0.44817423820495605,
            0.47173637151718140,
            -1.1804907321929932,
            1.4770672153278532
        ]
    );

    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.0, // 0.6060734308621007,
        -0.8874201453170976,
        0.0, // 0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];

    level2::syr('l', 6, 1.5, x.as_ptr(), 1, a.as_mut_ptr(), 6);
    approximately!(
        a,
        vec![
            1.0639661298460279,
            0.0000000000000000,
            0.10984987147026537,
            0.0000000000000000,
            -4.3680795975094888E-002,
            -6.8130794836697817E-002,
            0.19768425822257996,
            -1.0686926841735840,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.26264545321464539,
            -1.2329012155532837,
            1.1775481645367787,
            0.0000000000000000,
            -0.46972187911227348,
            -0.73264518793002509,
            -0.97400254011154175,
            0.68937271833419800,
            -0.95583909749984741,
            -1.2317070960998535,
            0.0000000000000000,
            0.0000000000000000,
            -0.91068071126937866,
            0.74127632379531860,
            6.8511530756950378E-002,
            -0.32375076413154602,
            -0.89972242283045611,
            0.29132965335120176,
            -0.76779019832611084,
            -1.1197201013565063,
            -0.44817423820495605,
            0.47173637151718140,
            -1.1804907321929932,
            1.9246562918200141
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('u', 6, 1.5, x.as_ptr(), 1, a.as_mut_ptr(), 6);
    approximately!(
        a,
        vec![
            1.0639661298460279,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.19768425822257996,
            -1.0686926841735840,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.37249532468491076,
            -1.2329012155532837,
            1.1775481645367787,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -0.97400254011154175,
            0.68937271833419800,
            -0.95583909749984741,
            -1.2317070960998535,
            0.0000000000000000,
            0.0000000000000000,
            -0.95436150724447355,
            0.74127632379531860,
            -0.40121034835532310,
            -0.32375076413154602,
            -0.89972242283045611,
            0.0000000000000000,
            -0.83592099316280866,
            -1.1197201013565063,
            -1.1808194261349811,
            0.47173637151718140,
            -0.88916107884179141,
            1.9246562918200141
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr('u', 6, 0.0, x.as_ptr(), 1, a.as_mut_ptr(), 6);
    assert_eq!(a, fixtures::M6X6U());

    let result = std::panic::catch_unwind(|| {
        level2::syr('x', 6, 1.0, vec![].as_ptr(), 1, vec![].as_mut_ptr(), 6)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr('l', 0, 1.0, vec![].as_ptr(), 0, vec![].as_mut_ptr(), 6)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr('l', 10, 1.0, vec![].as_ptr(), 2, vec![].as_mut_ptr(), 6)
    });
    assert!(result.is_err());
}

#[test]
fn syr2() {
    let mut a = fixtures::M6X6U();
    let x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    let y = vec![
        -7.7995958197861910,
        -0.90987740363925695,
        -1.3999755270779133,
        14.987896066159010,
        6.2202929537743330,
        11.557443037629128,
    ];

    level2::syr2('u', 6, 1.0, x.as_ptr(), 1, y.as_ptr(), 1, a.as_mut_ptr(), 6);
    approximately!(
        a,
        vec![
            2.3410548415528245,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            -4.454357029167,
            -2.171597750629876,
            0.0,
            0.0,
            0.0,
            0.0,
            7.299695161698482,
            -1.2739456326320604,
            2.4810094375675433,
            0.0,
            0.0,
            0.0,
            -3.0331043634855632,
            9.677217747189504,
            -14.403987374606984,
            1.9283826203341967,
            0.0,
            0.0,
            -4.176280924891648,
            4.190158087127983,
            -5.945517370452567,
            5.620847106509339,
            3.3034621529058006,
            0.0,
            -6.014399601339204,
            5.384148612710827,
            -11.475019248653608,
            9.939376538593871,
            6.321443871329548,
            14.1925367743503
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2(
        'l',
        6,
        1.0,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        a.as_mut_ptr(),
        6,
    );
    approximately!(
        a,
        vec![
            13.776029881910745,
            7.5019345421842161,
            9.4676397965954706,
            -11.026844348544614,
            6.5038685488862313,
            -5.2466092857159197,
            0.19768425822257996,
            3.3212727582885009,
            5.9445980278662063,
            -6.0140288378936830,
            3.4488818699418466,
            -3.2656003734532248,
            0.26264545321464539,
            -1.2329012155532837,
            3.1563660177640145,
            -13.448147766702762,
            8.9878451137976469,
            -2.0591017853036462,
            -0.97400254011154175,
            0.68937271833419800,
            -0.95583909749984741,
            1.2530258182029286,
            -4.1044462333807985E-002,
            7.0370495029635691,
            -0.91068071126937866,
            0.74127632379531860,
            6.8511530756950378E-002,
            -0.32375076413154602,
            -2.1894081024656344,
            -4.6520413614686973,
            -0.76779019832611084,
            -1.1197201013565063,
            -0.44817423820495605,
            0.47173637151718140,
            -1.1804907321929932,
            2.7575610426505364,
        ]
    );

    let mut a = fixtures::M6X6U();
    let y = vec![
        0.0,
        0.0,
        -1.3999755270779133,
        0.0,
        6.2202929537743330,
        11.557443037629128,
    ];
    let x = vec![
        -0.08252376201716412,
        0.0,
        -0.8874201453170976,
        0.10542139019376515,
        0.0,
        0.5503933584550523,
    ];
    level2::syr2(
        'l',
        6,
        1.0,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        a.as_mut_ptr(),
        6,
    );
    approximately!(
        a,
        vec![
            13.776029881910745,
            3.4236078833259853,
            1.2184016319884208,
            -11.026844348544614,
            0.0000000000000000,
            -0.95376366145859492,
            0.19768425822257996,
            -1.0686926841735840,
            0.65575191823477041,
            -5.5200131871259828,
            0.0000000000000000,
            -0.51332199015803326,
            0.26264545321464539,
            -1.2329012155532837,
            -3.7235338240861893E-003,
            -0.14758736253159732,
            0.0000000000000000,
            0.0000000000000000,
            -0.97400254011154175,
            0.68937271833419800,
            -0.95583909749984741,
            1.2530258182029286,
            0.0000000000000000,
            0.11553124977633900,
            -0.91068071126937866,
            0.74127632379531860,
            6.8511530756950378E-002,
            -0.32375076413154602,
            -1.0865030288696289,
            0.0000000000000000,
            -0.76779019832611084,
            -1.1197201013565063,
            -0.44817423820495605,
            0.47173637151718140,
            -1.1804907321929932,
            1.4702570438385010,
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2(
        'u',
        6,
        1.0,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        a.as_mut_ptr(),
        6,
    );
    approximately!(
        a,
        vec![
            13.776029881910745,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            3.6212921415485653,
            -1.0686926841735840,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            1.4810470852030662,
            -0.57714929731851328,
            -3.7235338240861893E-003,
            0.0000000000000000,
            0.0000000000000000,
            0.0000000000000000,
            -12.000846888656156,
            -4.8306404687917848,
            -1.1034264600314447,
            1.2530258182029286,
            0.0000000000000000,
            0.0000000000000000,
            -0.91068071126937866,
            0.74127632379531860,
            6.8511530756950378E-002,
            -0.32375076413154602,
            -1.0865030288696289,
            0.0000000000000000,
            -1.7215538597847058,
            -1.6330420915145396,
            -0.44817423820495605,
            0.58726762129352039,
            -1.1804907321929932,
            1.4702570438385010
        ]
    );

    let mut a = fixtures::M6X6U();
    level2::syr2(
        'u',
        0,
        1.0,
        x.as_ptr(),
        -1,
        y.as_ptr(),
        -1,
        a.as_mut_ptr(),
        6,
    );
    assert_eq!(a, fixtures::M6X6U().to_vec());

    let result = std::panic::catch_unwind(|| {
        level2::syr2(
            'x',
            6,
            1.0,
            vec![].as_ptr(),
            -1,
            vec![].as_ptr(),
            -1,
            vec![].as_mut_ptr(),
            6,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2(
            'l',
            0,
            1.0,
            vec![].as_ptr(),
            0,
            vec![].as_ptr(),
            1,
            vec![].as_mut_ptr(),
            6,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2(
            'l',
            0,
            1.0,
            vec![].as_ptr(),
            1,
            vec![].as_ptr(),
            0,
            vec![].as_mut_ptr(),
            6,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::syr2(
            'l',
            10,
            1.0,
            vec![].as_ptr(),
            1,
            vec![].as_ptr(),
            1,
            vec![].as_mut_ptr(),
            6,
        )
    });
    assert!(result.is_err());
}

#[test]
fn tbmv() {
    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 'n', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.81377161095802863,
            -0.92974060938955239,
            -0.32326202896773992,
            1.5548903476489961E-002,
            -1.0331334400689514,
            0.80921968938611144
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 'n', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.80933588667588952,
            0.32403908019249394,
            -0.32326202896773992,
            0.25081856016439108,
            -0.29685975280045795,
            0.55039334297180176
        ],
        1E-6
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 'n', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.3921764176213169,
            -1.0669889353103645E-002,
            0.37809597508418979
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 'n', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.63299544343142777,
            -0.11323537222660232,
            1.4578122305173125,
            0.79550691957540876,
            0.29448476712661564
        ],
        1E-6
    );

    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 't', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.89093314484581565,
            -0.39358835242235601,
            -0.29089361583507095,
            -0.26831028363471177,
            0.57997746543637163
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('u', 't', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.37364092159809748,
            -0.39358835242235601,
            -0.18507968907691819,
            0.46167858737450018,
            0.55039334297180176
        ],
        1E-6
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -9.5060091267271218E-002,
            -0.78241753765268185,
            1.4446885317433100E-002,
            0.19492695522830172,
            0.42412364266531127,
            1.0985770939826143
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.60221741965734510,
            1.4446885317433100E-002,
            0.33189201349864028,
            0.88099745495458426,
            0.95384883349004390
        ],
        1E-6
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbmv('l', 't', 'u', 0, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.60607343912124634,
            0.0000000000000000,
            0.10542138665914536,
            0.35287448763847351,
            0.55039334297180176
        ],
        1E-6
    );

    let result = std::panic::catch_unwind(|| {
        level2::tbmv(
            'x',
            'n',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv(
            'l',
            'x',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv(
            'l',
            't',
            'x',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv(
            'l',
            't',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            4,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbmv(
            'l',
            't',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn tbsv() {
    let a = fixtures::M6X6UB();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 'n', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -5.6128799739893508E-002,
            -0.49683608501376630,
            0.10909498392102078,
            -58.702879203847615,
            67.177160026230823,
            2.1819912816492972
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.0, /*0.5503933584550523*/
    ];
    level2::tbsv('u', 'n', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            0.32054266536864856,
            0.42212354015418174,
            0.18578820579680100,
            0.21966477167462894,
            0.35287448763847351,
            0.0000000000000000
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 't', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -7.8314301154714244E-002,
            -0.58160306780230442,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('u', 't', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.62238708803117682,
            0.78901628855963757,
            0.35015897013984221,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-5
    );

    let a = fixtures::M6X6LB();
    let mut x = vec![
        0.0, /*-0.08252376201716412*/
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 'n', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -2.0564350299322176,
            3.9636420672371844E-002,
            13.425553198426545,
            -9.5783234791141203E-002,
            -10.286880273121177
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 'n', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.57915143481106490,
            0.11308010837917339,
            -1.1356976816938495,
            6.7764370437012195E-002,
            1.8970665540252198
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'n', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.2901597416139481,
            -0.75012132865190395,
            -0.64790798734717925,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'u', 6, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.32715671421753267,
            0.55039334297180176
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tbsv('l', 't', 'u', 0, 5, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result = std::panic::catch_unwind(|| {
        level2::tbsv(
            'x',
            'n',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv(
            'l',
            'x',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv(
            'l',
            't',
            'x',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv(
            'l',
            't',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            4,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tbsv(
            'l',
            't',
            'n',
            6,
            5,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}

#[test]
fn tpsv() {
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.0, /*0.5503933584550523*/
    ];
    level2::tpsv(
        'u',
        'n',
        'n',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -1.6255878891735277E-002,
            6.0357087696828442,
            -5.9188003332057875,
            -2.2213347426612288E-004,
            -0.32478003122144583,
            0.0000000000000000
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv(
        'u',
        'n',
        'u',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        -1,
    );
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.50865490150182779,
            0.20360687364684518,
            0.22820304638469158,
            2.4407925023941568E-002,
            1.0838066709841392
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv(
        'u',
        't',
        'n',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -7.8314301154714244E-002,
            -0.58160306780230442,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv(
        'u',
        't',
        'u',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.62238708803117682,
            0.78901628855963757,
            0.35015897013984221,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-5
    );

    let ap = vec![
        1.4702569970829857,
        -1.180490682884277,
        0.47173637445323024,
        -0.4481742366033955,
        -1.1197200611269833,
        -0.767790184730859,
        -1.0865030469936974,
        -0.3237507545879617,
        0.06851153327714439,
        0.7412763052602079,
        -0.9106806824932887,
        -1.2317070584140966,
        -0.955839103276798,
        0.6893726977654734,
        -0.9740025611125269,
        -0.00372353379218051,
        -1.2329011995712644,
        0.2626454586627623,
        -1.068692711254786,
        0.197684262345795,
        1.053750863028617,
    ];
    let mut x = vec![
        0.0, /* -0.08252376201716412 */
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 'n', 'n', 6, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -0.55782029411532363,
            0.14662150363488616,
            -76.213910766438048,
            87.301923188598408,
            2.7940456912862199
        ],
        1E-5
    );

    let ap = vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        -1.2845993538721883,
        0.04672617218835198,
        1.1519117540872,
    ];
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 'n', 'u', 6, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.57915143481106490,
            0.11308010837917339,
            -1.1356976816938495,
            6.7764370437012195E-002,
            1.8970665540252198
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'n', 6, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.2901597416139481,
            -0.75012132865190395,
            -0.64790798734717925,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'u', 6, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.32715671421753267,
            0.55039334297180176
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpsv('l', 't', 'u', 0, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result = std::panic::catch_unwind(|| {
        level2::tpsv('x', 'n', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpsv('l', 'x', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpsv('l', 't', 'x', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpsv('l', 't', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 0)
    });
    assert!(result.is_err());
}

#[test]
fn tpmv() {
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'u',
        'n',
        'n',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -0.81377161095802863,
            -0.92974060938955239,
            -0.32326202896773992,
            1.5548903476489961E-002,
            -1.0331334400689514,
            0.80921968938611144,
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'u',
        'n',
        'u',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -0.80933588667588952,
            0.32403908019249394,
            -0.32326202896773992,
            0.25081856016439108,
            -0.29685975280045795,
            0.55039334297180176
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'l',
        'n',
        'n',
        6,
        fixtures::M6X6PL().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.3921764176213169,
            -1.0669889353103645E-002,
            0.37809597508418979
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'l',
        'n',
        'u',
        6,
        fixtures::M6X6PL().as_ptr(),
        x.as_mut_ptr(),
        1,
    );
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.63299544343142777,
            -0.11323537222660232,
            1.4578122305173125,
            0.79550691957540876,
            0.29448476712661564
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'u',
        't',
        'n',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        -1,
    );
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.89093314484581565,
            -0.39358835242235601,
            -0.29089361583507095,
            -0.26831028363471177,
            0.57997746543637163
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'u',
        't',
        'u',
        6,
        fixtures::M6X6PU().as_ptr(),
        x.as_mut_ptr(),
        -1,
    );
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.37364092159809748,
            -0.39358835242235601,
            -0.18507968907691819,
            0.46167858737450018,
            0.55039334297180176
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'l',
        't',
        'n',
        6,
        fixtures::M6X6PL().as_ptr(),
        x.as_mut_ptr(),
        -1,
    );
    approximately!(
        x,
        vec![
            -9.5060091267271218E-002,
            -0.78241753765268185,
            1.4446885317433100E-002,
            0.19492695522830172,
            0.42412364266531127,
            1.0985770939826143
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv(
        'l',
        't',
        'u',
        6,
        fixtures::M6X6PL().as_ptr(),
        x.as_mut_ptr(),
        -1,
    );
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.60221741965734510,
            1.4446885317433100E-002,
            0.33189201349864028,
            0.88099745495458426,
            0.95384883349004390
        ],
        1E-5
    );

    // matrix_6x6_matrix::lower_band.filter(f => f)
    let ap = vec![
        1.2629542848807933,
        -0.3262333607056494,
        1.3297992629225006,
        1.2724293214294047,
        0.4146414344564082,
        -1.5399500419037095,
        -0.2947204467905602,
        -0.005767172747536955,
        2.404653388857951,
        0.7635934611404596,
        -0.7990092489893682,
        -0.29921511789731614,
        -0.411510832795067,
        0.2522234481561323,
        -0.8919211272845686,
        0.37739564598170106,
        0.1333363608148414,
        0.8041895097449078,
        -1.2845993538721883,
        0.04672617218835198,
        1.1519117540872,
    ];
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::tpmv('l', 't', 'u', 0, ap.as_ptr(), x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result = std::panic::catch_unwind(|| {
        level2::tpmv('x', 'n', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpmv('l', 'x', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpmv('l', 't', 'x', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 1)
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::tpmv('l', 't', 'n', 6, vec![].as_ptr(), vec![0.0].as_mut_ptr(), 0)
    });
    assert!(result.is_err());
}

#[test]
fn trmv() {
    let a = fixtures::M6X6U();
    let mut x = vec![
        0.0,
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 'n', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.95988898254194988,
            0.16436073262040418,
            -0.31995769014273201,
            1.5548903476489961E-002,
            -1.0331334400689514,
            0.80921968938611144
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 'n', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.80933588667588952,
            0.32403908019249394,
            -0.32326202896773992,
            0.25081856016439108,
            -0.29685975280045795,
            0.55039334297180176
        ],
        1E-5
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 'n', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.10422373620238545,
            -0.15170022700843333,
            -0.11323537222660232,
            1.3921764176213169,
            -1.0669889353103645E-002,
            0.37809597508418979
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 'n', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.63299544343142777,
            -0.11323537222660232,
            1.4578122305173125,
            0.79550691957540876,
            0.29448476712661564
        ],
        1E-5
    );

    let a = fixtures::M6X6U();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 't', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -1.7017496426889362,
            -0.89093314484581565,
            -0.39358835242235601,
            -0.29089361583507095,
            -0.26831028363471177,
            0.57997746543637163
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('u', 't', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -1.6629422617695848,
            0.37364092159809748,
            -0.39358835242235601,
            -0.18507968907691819,
            0.46167858737450018,
            0.55039334297180176
        ],
        1E-5
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -9.5060091267271218E-002,
            -0.78241753765268185,
            1.4446885317433100E-002,
            0.19492695522830172,
            0.42412364266531127,
            1.0985770939826143
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.60221741965734510,
            1.4446885317433100E-002,
            0.33189201349864028,
            0.88099745495458426,
            0.95384883349004390
        ],
        1E-5
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trmv('l', 't', 'u', 0, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-5
    );

    let result = std::panic::catch_unwind(|| {
        level2::trmv(
            'x',
            'n',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trmv(
            'l',
            'x',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trmv(
            'l',
            't',
            'x',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trmv(
            'l',
            't',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trmv(
            'l',
            't',
            'n',
            6,
            vec![0.0].as_ptr(),
            5,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());
}

#[test]
fn trsv() {
    let a = fixtures::M6X6U();
    let mut x = vec![
        0.0, /*-0.08252376201716412,*/
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 'n', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), -1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -0.55782029411532363,
            0.86710133253661859,
            -261.16262399406247,
            301.13343516177395,
            9.4432112043706962
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 'n', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            1.1749759189487581,
            0.78191186392724021,
            0.34083406303627062,
            0.17037616997843336,
            1.0026087280774050,
            0.55039334297180176
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 't', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -7.8314301154714244E-002,
            -0.58160306780230442,
            187.05086808602871,
            -145.50587380040002,
            54.496024225473036,
            147.35034084184912
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('u', 't', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.62238708803117682,
            0.78901628855963757,
            0.35015897013984221,
            -0.12433160387523684,
            1.2255934857017796
        ],
        1E-4
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        0.0, /* -0.08252376201716412,*/
        0.6060734308621007,
        -0.8874201453170976,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 'n', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            0.0000000000000000,
            -2.0564350299322176,
            3.0054629904717731,
            16.659479471000662,
            0.82220809173318421,
            -10.285404879430091
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 'n', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -8.2523763179779053E-002,
            0.57915143481106490,
            0.11308010837917339,
            -1.1356976816938495,
            6.7764370437012195E-002,
            1.8970665540252198
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'n', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.35540515552701807,
            -9.2901597416139481,
            -0.75012132865190395,
            -0.64790798734717925,
            -0.25731628521585004,
            0.47780860806694775
        ],
        1E-4
    );

    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'u', 6, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            1.3381974790667357,
            1.7132221723919971,
            0.25167885419044456,
            -0.38082104951807116,
            0.32715671421753267,
            0.55039334297180176
        ],
        1E-4
    );

    let a = fixtures::M6X6L();
    let mut x = vec![
        -0.08252376201716412,
        0.6060734308621007,
        0.0,
        0.10542139019376515,
        0.3528744733184766,
        0.5503933584550523,
    ];
    level2::trsv('l', 't', 'u', 0, a.as_ptr(), 6, x.as_mut_ptr(), 1);
    approximately!(
        x,
        vec![
            -0.08252376201716412,
            0.6060734308621007,
            0.0,
            0.10542139019376515,
            0.3528744733184766,
            0.5503933584550523
        ],
        1E-4
    );
    let result = std::panic::catch_unwind(|| {
        level2::trsv(
            'x',
            'n',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trsv(
            'l',
            'x',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trsv(
            'l',
            't',
            'x',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trsv(
            'l',
            't',
            'n',
            6,
            vec![0.0].as_ptr(),
            4,
            vec![].as_mut_ptr(),
            1,
        )
    });
    assert!(result.is_err());

    let result = std::panic::catch_unwind(|| {
        level2::trsv(
            'l',
            't',
            'n',
            6,
            vec![0.0].as_ptr(),
            6,
            vec![].as_mut_ptr(),
            0,
        )
    });
    assert!(result.is_err());
}
